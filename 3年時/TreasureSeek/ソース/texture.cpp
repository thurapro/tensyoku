//=============================================================================
// テクスチャ保存 [ texture.cpp ]
//
// 製作者	: 松尾 雄太
//
// 機能		: テクスチャ一括管理
//=============================================================================

//=============================================================================
// インクルード
//=============================================================================
#include "manager.h"
#include "renderer.h"
#include <stdio.h>
#include "texture.h"

//=============================================================================
// マクロ定義
//=============================================================================
#define MAX_STR		(1024)				// 最大文字数		
#define DIRECTORY	("DATA/TEXTURE/")	// ディレクトリ

//=============================================================================
// 関数名	: CTexture
// 戻り値	: なし
// 引数値	: なし
// 機能		: インスタンス生成	( 初期化 )
//=============================================================================
CTexture::CTexture(void)
{
	// テクスチャ初期化
	m_ppTexture = NULL;		// テクスチャ初期化
	m_nTextureNum = 0;		// テクスチャ番号初期化
}

//=============================================================================
// 関数名	: ~CTexture
// 戻り値	: なし
// 引数値	: なし
// 機能		: インスタンス破棄	( 終了処理 )
//=============================================================================
CTexture::~CTexture(void)
{
}

//=============================================================================
// 関数名	: Init
// 戻り値	: エラーまたは正常
// 引数値	: ファイル名 ( テクスチャ名が書いてあるテキスト )
// 機能		: テクスチャ初期化
//=============================================================================
HRESULT CTexture::Init(char *FileName)
{
	HRESULT hr;		// エラーチェック変数

	// ファイルの読み込み
	hr = LoardTexture(FileName);	// ファイル読み込み
	ERROR_CHACK(hr);				// ファイルが読み込めたか
	return S_OK;
}

//=============================================================================
// 終了処理
//=============================================================================
void CTexture::Uninit(void)
{
	for(int i = 0; i < m_nTextureNum; i++)
	{
		// テクスチャ番号数分
		SALF_RELEASE(m_ppTexture[i]);	// テクスチャ破棄		
	}
	SALF_DELETE_ARRAY(m_ppTexture);
}

//=============================================================================
// テクスチャ読み込み
//=============================================================================
HRESULT CTexture::LoardTexture(char *FileName)
{
		
	HRESULT hr;						// エラーチェック変数	
	CRenderer *pRenderer =	NULL;	// レンダラークラス用変数	
	char strFile[MAX_STR] = {NULL};	// ファイルの中にあるを保存用
	FILE *fp = NULL;				// ファイルポインタ

	// レンダラー取得
	pRenderer = CManager::GetRenderer();
	if( pRenderer == NULL )
	{
		// レンダラーが取得できなかった場合
		return E_FAIL;				// エラーコード
	}

	fp = fopen(FileName, "r");	// ファイルを開く
	if( fp == NULL )
	{
		// ファイルがない場合
		return E_FAIL;				// エラーコード
	}

	// ファイル行数取得
	while(true)
	{
		// ファイルの行数取得
		if(fscanf(fp, "%s", &strFile) != EOF)
		{
			// 行数 = テクスチャの枚数
			m_nTextureNum++;	// 行数カウント
		}
		else
		{
			// ファイルの中身が無くなった
			break;
		}
	}

	int nError;

	// ファイルを元の位置に戻す
	nError = fseek(fp, 0, SEEK_SET);

	// テクスチャ変数　動的確保
	m_ppTexture = NEW LPDIRECT3DTEXTURE9[m_nTextureNum];

	// テクスチャ読み込み
	for( int i = 0; i < m_nTextureNum; i++)
	{
		// テクスチャの名前を取得
		if(fscanf(fp, "%s", &strFile) != EOF)
		{
			// ディレクトリ
			char Directory[MAX_STR]  = DIRECTORY;

			// ファイル名とディレクトリを配列する
			strcat(Directory, strFile);

			// テクスチャ読み込み
			hr = D3DXCreateTextureFromFile(pRenderer->GetDevice(), Directory, &m_ppTexture[i]);
			if( FAILED(hr) )
			{
				// 指定したテクスチャが存在しなければ
				fclose(fp);			// ファイルを閉じる
				return E_FAIL;		// エラーコード
			}
		}
	}
	fclose(fp);		// ファイル閉じる
	return S_OK;	// 正常終了
}
