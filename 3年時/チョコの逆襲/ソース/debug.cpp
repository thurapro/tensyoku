//=============================================================================
//
// デバッグ処理 [debug.cpp]
//
// 名前	: 松尾 雄太
//
//=============================================================================
#define _CRT_SECURE_NO_DEPRECATE 1

//=============================================================================
// インクルード
//=============================================================================
#include "../hedder/debug.h"

//=============================================================================
// グローバル変数
//=============================================================================
static LPD3DXFONT g_pD3DXFont = NULL;
static char g_aStrDebug[1024] = {"\0"};
static int g_nTop = 0;
static int g_nLeft = 0;

//=============================================================================
//
//	関数名	:
//	
//	戻り値	:
//
//	引数	:
//
//	機能	:
//
//=============================================================================
HRESULT InitDebug(LPDIRECT3DDEVICE9 pDevice)
{
	HRESULT hr;

	hr = D3DXCreateFont( pDevice,
						20 , 
						20 ,
						0 ,
						0 ,
						FALSE,
						SHIFTJIS_CHARSET,
						OUT_DEFAULT_PRECIS,
						DEFAULT_QUALITY,
						DEFAULT_PITCH,
						"Tarminal",
						&g_pD3DXFont );
	return hr;
}
//=============================================================================
//
//	関数名	:
//	
//	戻り値	:
//
//	引数	:
//
//	機能	:
//
//=============================================================================
void UninitDebug(void)
{
	if(g_pD3DXFont != NULL)
	{
		g_pD3DXFont->Release();
		g_pD3DXFont = NULL;
	}
}

//=============================================================================
//
//	関数名	:
//	
//	戻り値	:
//
//	引数	:
//
//	機能	:
//
//=============================================================================
void DrawDebug(void)
{
	RECT rect = { g_nLeft , g_nTop , SCREEN_WIDTH , SCREEN_HEIGHT };
	g_pD3DXFont->DrawTextA(	NULL	,
							g_aStrDebug ,
							-1		,
							&rect	,
							DT_LEFT	,
							D3DCOLOR_ARGB( 255, 0 , 0, 255 ) );

}


//=============================================================================
//
//	関数名	:
//	
//	戻り値	:
//
//	引数	:
//
//	機能	:
//
//=============================================================================
void my_printf(char *fmt , ...)
{
	va_list ap;
	
	va_start(ap , fmt);
	vsprintf( g_aStrDebug , fmt , ap );
	va_end(ap);
}


