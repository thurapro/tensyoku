//=============================================================================
// 草処理 [grass.cpp]
//
// 製作者	: 松尾 雄太
//
// 機能		: 草作成
//=============================================================================

//=============================================================================
// インクルード
//=============================================================================
#include "grass.h"

//=============================================================================
// 関数名	: Tree
// 戻り値	: なし
// 引数値	: 優先度 オブジェの種類
// 機能		: 草のインスタンス生成
//=============================================================================
CGrass::CGrass(int nPriority, OBJTYPE objType):CBillboard(nPriority, objType)
{
}

//=============================================================================
// 関数名	: ~Tree
// 戻り値	: なし
// 引数値	: なし
// 機能		: 草のインスタンス破棄
//=============================================================================
CGrass::~CGrass(void)
{
	// 処理なし
}

//=============================================================================
// 関数名	: Create
// 戻り値	: 草のポインタ
// 引数値	: ポリゴンの大きさ(幅、高さ), 画像番号
// 機能		: 草作成
//=============================================================================
CGrass *CGrass::Create(float fWidth, float fHeight, USHORT nTexNum)
{
	// 変数宣言
	HRESULT hr = S_OK;
	CGrass *pGrass = NULL;							// 草のポインタ
	NEW_TYPE(pGrass, CGrass);						// 初期化

	// 初期化
	hr = pGrass->Init(fWidth, fHeight, nTexNum);	// 草初期化
	if( FAILED(hr) )
	{
		return NULL;								// エラーコード
	}

	return pGrass;									// 正常コード
}

//=============================================================================
// 関数名	: CreateLoad
// 戻り値	: 草のポインタ
// 引数値	: 草のデータ
// 機能		: 草の作成 & データ読み込み
//=============================================================================
CGrass *CGrass::CreateLoad(BILLBOARD dataGrass)
{
	// 変数宣言
	HRESULT hr = S_OK;
	bool bLoad = true;
	CGrass *pGrass = NULL;
	
	// 草のデータ読み込み
	bLoad = pGrass->LoadData(dataGrass);
	if( bLoad = false )
	{
		return NULL;		// エラーコード
	}

	// 初期化
	hr = pGrass->Init(dataGrass.fWidth, dataGrass.fHeight, 
						dataGrass.nTexNum);		// 草初期化
	if( FAILED(hr) )
	{
		return NULL;							// エラーコード
	}
	
	return pGrass;
}


//=============================================================================
// 関数名	: Init
// 戻り値	: なし
// 引数値	: なし
// 機能		: 草の初期化
//=============================================================================
HRESULT CGrass::Init(float fWidth, float fHeight, USHORT nTexNum)
{
	// 変数宣言
	HRESULT hr = S_OK;		// 判定
	
	// 初期化処理
	hr = CBillboard::Init(fWidth, fHeight, nTexNum);
	ERROR_CHACK(hr);		// エラーチェック
	
	return S_OK;
}

//=============================================================================
// 関数名	: Uninit 
// 戻り値	: なし
// 引数値	: なし
// 機能		: 草破棄
//=============================================================================
void CGrass::Uninit(void)
{
	CBillboard::Uninit();	// 終了処理
}

//=============================================================================
// 関数名	: Updata
// 戻り値	: なし
// 引数値	: なし
// 機能		: 草の更新
//=============================================================================
void CGrass::Update(void)
{
}

//=============================================================================
// 関数名	: Draw
// 戻り値	: なし
// 引数値	: なし
// 機能		: 草の描画
//=============================================================================
void CGrass::Draw(void)
{
		CBillboard::Draw();
}

// end of file